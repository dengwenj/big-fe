// let i = 1
// function foo() {
//   console.log(i)
// }
// foo()

function foo() {
  let name = "朴睦"
  return function b() {
    console.log(name)
  }
}
const f = foo()
f()

/**
 * 只要在函数中使用了外部数据，就创建了闭包
 * 闭包不是一个具体的技术，而是一种现象，是指在定义函数时，周围环境中的信息可以在函数中使用。换句话说执行函数时，只要在函数中使用了外部数据，就创建了闭包
 * 而作用域链，正是实现闭包的手段
 * 
 * 闭包是一个封闭的空间，里面存储了在其他地方会引用到的该作用域的值，在 JS 中是通过作用域链来实现的闭包
 * 可以通过一些手段手动创建闭包，从而让外部环境访问到函数内部的局部变量，让局部变量持续保存下来，不随着它的上下文环境一起销毁
 * 
 * 销毁闭包
 * 可以把被引用的变量设置为 null，即手动清除变量，这样下次 js 垃圾回收器在进行垃圾回收时，发现此变量已经没有任何引用了，就会把设为 null 的量给回收
 */
