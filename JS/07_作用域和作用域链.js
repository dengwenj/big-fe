/**
 * 作用域是在运行时代码中的某些特定部分中变量，函数和对象的可访问性
 * 作用域决定了代码区块中变量和其他资源的可见性
 * 
 * ！！！！作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突
 * 全局作用域、函数作用域、块级作用域
 */

/**
 * 要到创建这个函数的那个域 作用域中取值，这里强调的是”创建“，而不是”调用“，这就是所谓的”静态作用域“
 */
let a = "a"
function foo() {
  console.log(a) // a
}
(function() {
  let a = "aa"
  let b = "b"
  foo()
})()

/**
 * js 属于解释型语言，js 执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样
 * 解释阶段：
 * - 词法分析
 * - 语法分析
 * - 作用域规则确定
 * 执行阶段：
 * - 创建执行上下文
 * - 执行函数代码
 * - 垃圾回收
 */

/**
 * 什么是作用域链？
 * 当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止
 * 一层一层往上找
 * 作用域链有个非常重要的特性，就是作用域中的值是在函数创建的时候，就已经被存储了，是静态的
 * 所谓静态，就是说作用域中的值一旦被确定了，永远不会变。函数可以永远不被调用，但是作用域中的值在函数创建的时候就已经被写入了，并且存储在函数作用域链对象里面
 */