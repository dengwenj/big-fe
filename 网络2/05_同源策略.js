/**
 * 浏览器有一个重要的安全策略，称之为【同源策略】
 * 其中，源 = 协议 + 主机 + 端口，两个源相同，称之为同源，两个源不同，称之为跨域
 * 
 * 同源策略是指：若页面的源和页面运行过程中加载的源不一致时，出于安全考虑，浏览器会对跨域的资源访问进行一些限制
 * 
 * 解决跨域的方式有：
 * 1、代理
 * 2、CORS
 * 3、JSONP
 * 
 * 代理适用的场景是：生产环境不发生跨域，但开发环境发生跨域。
 * 只需要在开发环境使用代理解决跨域即可
 * 原理：跨域只会在浏览器中产生，现在用一个中间层服务器(和浏览器页面路径是同源的)，然后用中间服务器去请求后端返回数据，中间服务器再返回数据给浏览器
 * 
 * CORS 是基于 http1.1 的一种跨域解决方案，它的全称是 Cross-Origin Resource Sharing，跨域资源共享
 * 它的总体思路：如果浏览器要跨域访问服务器的资源，需要获得服务器的允许
 * CORS 规定了三种不同的交互模式：
 * 1、简单请求
 * 2、需要预检的请求
 * 3、附带身份凭证的请求
 * 
 * 1、简单请求：
 * - 请求方法属于：get、post head 其中一种
 * - 请求头仅包含安全的字段，不能手动添加其他字段
 * - 请求头如果包含 Content-Type，仅限：text/plain、multipart/form-data、application/x-www-form-urlencoded
 * 当浏览器判定某个 ajax 跨域请求是简单请求时，会发生以下的事情：
 * 一、请求头中会自动添加 Origin 字段
 * 二、服务器响应头中应包含 Access-Control-Allow-Origin
 * 
 * 2、需要预检的请求（会发送两次，第一次预检，第二次真实）
 * 一、浏览器发送预检请求，询问服务器是否允许
 * 二、服务器允许
 * 三、浏览器发送真实请求
 * 四、服务器完成真实的响应
 * 
 * JSONP
 * 当需要跨域请求时，不使用 AJAX，转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样可以到达服务器
 * 服务器拿到请求后，响应一段 JS 代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端
 * JSONP 有个缺点，只支持 get 请求
 */
