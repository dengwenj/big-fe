/**
 * vue 的 diff 算法
 * 当组件创建和更新时，vue 均会执行内部的 update 函数，该函数使用 render 函数生成的虚拟 dom 树，
 * 将新旧两树进行对比，找到差异点，最终更新到真实 dom
 * 
 * 对比差异的过程叫 diff，vue 在内部通过一个叫 patch 的函数完成该过程
 * 
 * 在对比时，vue 采用深度优先、同层比较的方式进行对比
 * 
 * 在判断两个节点是否相同时，vue 是通过虚拟节点的 key 和 tag 来进行判断的
 * 
 * 具体来说，首先对根节点进行对比，如果相同则将旧节点关联的真实 dom 的引用挂到新节点上，然后根据需要更新属性到真实 dom，然后再对比子节点数组
 * 如果不相同，则按照新节点的信息递归创建所有真实 dom，同时挂到对应虚拟节点上，然后移除掉旧的 dom
 * 
 * 在对比其子节点数组时，vue 对每个子节点数组使用了两个指针，分别指向头尾，然后不断向中间靠拢来进行对比，这样做的目的是尽量复用真实 dom，
 * 尽量少的销毁和创建真实 dom。若果发现相同，则进入和根节点一样的对比流程，如果发现不同，则移动真实 dom 到合适的位置
 * 
 * 这样一直递归的遍历下去，直到整棵树完成对比
 * 
 * 循环是加上 key 解决效率的问题
 * 
 * patch 函数的对比流程
 * 1、【相同】：是指两个虚拟节点的标签类型、key 均相同，但 input 元素还要看 type 属性
 * 2、【新建元素】：是指根据一个虚拟节点提供的信息，创建一个真实 dom 元素，同时挂载到虚拟节点的 elm 属性上
 * 3、【销毁元素】：是指 vnode.elm.remove()
 * 4、【更新】：是指两个虚拟节点进行对比更新，它仅发生在两个虚拟节点【相同】的情况下
 * 5、【对比子节点】：是指对两个虚拟节点的子节点进行对比
 */